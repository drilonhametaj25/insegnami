'use client';

import { useState } from 'react';
import { 
  Container, 
  Title, 
  Paper, 
  Table, 
  Button, 
  Group, 
  Text, 
  Badge, 
  ActionIcon, 
  Menu,
  Modal,
  TextInput,
  Select,
  Stack,
  Alert,
  LoadingOverlay
} from '@mantine/core';
import { DateInput } from '@mantine/dates';
import { 
  IconDownload, 
  IconDots, 
  IconEye, 
  IconTrash, 
  IconPlus,
  IconInfoCircle
} from '@tabler/icons-react';
import { useTranslations } from 'next-intl';
import { useDisclosure } from '@mantine/hooks';
import { format } from 'date-fns';
import { useReports, useCreateReport, useDeleteReport } from '@/lib/hooks/useAnalytics';
import { showNotification } from '@mantine/notifications';

const reportTypes = [
  { value: 'ATTENDANCE', label: 'Attendance Report' },
  { value: 'FINANCIAL', label: 'Financial Report' },
  { value: 'PROGRESS', label: 'Progress Report' },
  { value: 'OVERVIEW', label: 'Overview Report' },
  { value: 'CLASS_ANALYTICS', label: 'Class Analytics' },
  { value: 'TEACHER_PERFORMANCE', label: 'Teacher Performance' },
];

const reportPeriods = [
  { value: 'WEEKLY', label: 'Weekly' },
  { value: 'MONTHLY', label: 'Monthly' },
  { value: 'QUARTERLY', label: 'Quarterly' },
  { value: 'YEARLY', label: 'Yearly' },
  { value: 'CUSTOM', label: 'Custom' },
];

export default function ReportsPage() {
  const t = useTranslations('Analytics');
  const [opened, { open, close }] = useDisclosure(false);
  const [formData, setFormData] = useState({
    title: '',
    type: 'OVERVIEW',
    period: 'MONTHLY',
    startDate: new Date(),
    endDate: new Date(),
  });

  const { data: reports, isLoading, refetch } = useReports();
  const createReportMutation = useCreateReport();
  const deleteReportMutation = useDeleteReport();

  const handleCreateReport = async () => {
    try {
      await createReportMutation.mutateAsync({
        ...formData,
        type: formData.type as any,
        period: formData.period as any,
        startDate: formData.startDate.toISOString(),
        endDate: formData.endDate.toISOString(),
      });
      
      showNotification({
        title: 'Success',
        message: 'Report created successfully',
        color: 'green',
      });
      
      close();
      refetch();
      setFormData({
        title: '',
        type: 'OVERVIEW',
        period: 'MONTHLY',
        startDate: new Date(),
        endDate: new Date(),
      });
    } catch (error) {
      showNotification({
        title: 'Error',
        message: 'Failed to create report',
        color: 'red',
      });
    }
  };

  const handleDeleteReport = async (id: string) => {
    if (window.confirm('Are you sure you want to delete this report?')) {
      try {
        await deleteReportMutation.mutateAsync(id);
        showNotification({
          title: 'Success',
          message: 'Report deleted successfully',
          color: 'green',
        });
        refetch();
      } catch (error) {
        showNotification({
          title: 'Error',
          message: 'Failed to delete report',
          color: 'red',
        });
      }
    }
  };

  const getBadgeColor = (type: string) => {
    const colors: Record<string, string> = {
      ATTENDANCE: 'blue',
      FINANCIAL: 'green',
      PROGRESS: 'orange',
      OVERVIEW: 'purple',
      CLASS_ANALYTICS: 'cyan',
      TEACHER_PERFORMANCE: 'pink',
    };
    return colors[type] || 'gray';
  };

  return (
    <Container size="xl" py="md">
      <Group justify="space-between" mb="lg">
        <div>
          <Title order={2}>Reports & Analytics</Title>
          <Text c="dimmed" size="sm">
            Generate and manage comprehensive reports
          </Text>
        </div>
        <Button 
          leftSection={<IconPlus size={16} />} 
          onClick={open}
        >
          Create Report
        </Button>
      </Group>

      {!reports || reports.length === 0 ? (
        <Alert 
          icon={<IconInfoCircle size={16} />} 
          title="No reports available" 
          color="blue"
        >
          Start by creating your first report using the "Create Report" button above.
        </Alert>
      ) : (
        <Paper withBorder>
          <Table>
            <Table.Thead>
              <Table.Tr>
                <Table.Th>Report Title</Table.Th>
                <Table.Th>Type</Table.Th>
                <Table.Th>Period</Table.Th>
                <Table.Th>Date Range</Table.Th>
                <Table.Th>Generated By</Table.Th>
                <Table.Th>Created</Table.Th>
                <Table.Th>Actions</Table.Th>
              </Table.Tr>
            </Table.Thead>
            <Table.Tbody>
              {reports.map((report) => (
                <Table.Tr key={report.id}>
                  <Table.Td>
                    <Text fw={500}>{report.title}</Text>
                  </Table.Td>
                  <Table.Td>
                    <Badge color={getBadgeColor(report.type)} size="sm">
                      {report.type.replace('_', ' ')}
                    </Badge>
                  </Table.Td>
                  <Table.Td>
                    <Text size="sm">{report.period}</Text>
                  </Table.Td>
                  <Table.Td>
                    <Text size="sm">
                      {format(new Date(report.startDate), 'MMM dd')} - {format(new Date(report.endDate), 'MMM dd, yyyy')}
                    </Text>
                  </Table.Td>
                  <Table.Td>
                    <Text size="sm">
                      {report.user?.firstName} {report.user?.lastName}
                    </Text>
                  </Table.Td>
                  <Table.Td>
                    <Text size="sm" c="dimmed">
                      {format(new Date(report.createdAt), 'MMM dd, yyyy')}
                    </Text>
                  </Table.Td>
                  <Table.Td>
                    <Group gap="xs">
                      <ActionIcon variant="subtle" size="sm">
                        <IconEye size={16} />
                      </ActionIcon>
                      <ActionIcon variant="subtle" size="sm">
                        <IconDownload size={16} />
                      </ActionIcon>
                      <Menu shadow="md" width={200}>
                        <Menu.Target>
                          <ActionIcon variant="subtle" size="sm">
                            <IconDots size={16} />
                          </ActionIcon>
                        </Menu.Target>
                        <Menu.Dropdown>
                          <Menu.Item leftSection={<IconDownload size={14} />}>
                            Export PDF
                          </Menu.Item>
                          <Menu.Item leftSection={<IconDownload size={14} />}>
                            Export Excel
                          </Menu.Item>
                          <Menu.Divider />
                          <Menu.Item 
                            color="red" 
                            leftSection={<IconTrash size={14} />}
                            onClick={() => handleDeleteReport(report.id)}
                          >
                            Delete Report
                          </Menu.Item>
                        </Menu.Dropdown>
                      </Menu>
                    </Group>
                  </Table.Td>
                </Table.Tr>
              ))}
            </Table.Tbody>
          </Table>
        </Paper>
      )}

      {/* Create Report Modal */}
      <Modal 
        opened={opened} 
        onClose={close} 
        title="Create New Report"
        size="md"
      >
        <LoadingOverlay visible={createReportMutation.isPending} />
        
        <Stack>
          <TextInput
            label="Report Title"
            placeholder="Enter report title..."
            value={formData.title}
            onChange={(event) => setFormData({ ...formData, title: event.target.value })}
            required
          />

          <Select
            label="Report Type"
            data={reportTypes}
            value={formData.type}
            onChange={(value) => setFormData({ ...formData, type: value || 'OVERVIEW' })}
            required
          />

          <Select
            label="Report Period"
            data={reportPeriods}
            value={formData.period}
            onChange={(value) => setFormData({ ...formData, period: value || 'MONTHLY' })}
            required
          />

          <Group grow>
            <DateInput
              label="Start Date"
              value={formData.startDate}
              onChange={(date: Date | null) => setFormData({ ...formData, startDate: date || new Date() })}
              required
            />
            <DateInput
              label="End Date"
              value={formData.endDate}
              onChange={(date: Date | null) => setFormData({ ...formData, endDate: date || new Date() })}
              required
            />
          </Group>

          <Group justify="flex-end" mt="md">
            <Button variant="outline" onClick={close}>
              Cancel
            </Button>
            <Button 
              onClick={handleCreateReport}
              disabled={!formData.title}
              loading={createReportMutation.isPending}
            >
              Create Report
            </Button>
          </Group>
        </Stack>
      </Modal>
    </Container>
  );
}
